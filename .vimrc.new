"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim Configuration
"
" DESCRIPTION
"   Configuration file for Vim.
"
"   Vim (short for Vi IMproved) is a highly configurable, powerful text editor
"   used primarily for programming and system administration. It is an
"   enhanced version of the Unix vi editor, offering many features for
"   efficient text manipulation.
"
"   See: https://www.vim.org
"
" INSTALLATION
"   Symlink file to $HOME/.vimrc:
"
"     ln -s .vimrc $HOME/.vimrc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Disable vi compatibility mode (enables Vim's enhanced features).
set nocompatible

" Disable Markdown syntax highlighting via vim-polyglot (use vim-markdown
" instead).
"
" NOTE: This variable must be set *before* vim-polyglot is loaded.
let g:polyglot_disabled = ['markdown']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-plug Configuration
"
" vim-plug is a minimalist and fast plugin manager for Vim and Neovim. As of
" 2025, vim-plug remains the most widely-used plugin manager across Vim and
" Neovim, thanks to its speed, ease of use, and robust features.
"
" See: https://github.com/junegunn/vim-plug
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call plug#begin()
" Language
Plug 'dense-analysis/ale'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'
Plug 'sheerun/vim-polyglot'

" NOTE: plug#end() automatically executes `filetype plugin indent on` and
" `syntax enable`.
call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ALE Configuration
"
" ALE (Asynchronous Lint Engine) is a popular Vim plugin that provides
" real-time linting and fixing capabilities. ALE is particularly popular
" because it brings modern IDE-like features to Vim while maintaining the
" editor's philosophy of being fast and customizable.
"
" NOTE: Though ALE offers Language Server support for autocomplete,
" go-to-definition, and find references, this functionality is fulfilled by
" YouCompleteMe.
"
" See: https://github.com/dense-analysis/ale
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Disable all LSP integrations (use YouCompleteMe instead).
let g:ale_disable_lsp = 1

" Enable fix/lint on save.
let g:ale_fix_on_save = 1
let g:ale_lint_on_save = 1

" Only use linters explicitly set via g:ale_linters.
let g:ale_linters_explicit = 1

" Configure fixers and linters (Go, Python, JavaScript, TypeScript, Shell).
"
" Go:
"
"   goimports
"
"     Adds, removes, and sorts import lines. In addition to fixing imports,
"     goimports also formats code in the same style as gofmt (i.e., it can be
"     used as a replacement).
"
"     See: https://pkg.go.dev/golang.org/x/tools/cmd/goimports
"
"   golangci-lint
"
"     Go linters runner which integrates multiple linters. By default,
"     golangci-lint runs an essential subset of all available Go linters:
"     errcheck, gosimple, govet, ineffassign, staticcheck, unused. To enable
"     all linters, use the `--enable-all` flag.
"
"     See: https://golangci-lint.run
"
" Python:
"
"   ruff
"
"     Ruff is an ultra-fast Python linter, formatter, and code quality tool,
"     written in Rust. As of 2025, Ruff is the most popular linter and
"     formatter for Python.
"
"     NOTE: For the fixers, 'ruff' will run `ruff check --fix`, which will
"     attempt to apply fixes to resolve lint violations. `ruff_format` will
"     run `ruff format`, which simply formats the code.
"
"     NOTE: Ruff uses a global ruff.toml located at
"     $XDG_CONFIG_HOME/ruff/ruff.toml.
"
"   mypy
"
"     mypy is a static type checker for Python that analyzes code for
"     type-related errors without executing it. It's designed to catch type
"     mismatches, attribute errors, and other issues that would cause runtime
"     errors. As of 2025, mypy is the most popular static type checker for
"     Python.
"
" JavaScript:
"
"   eslint
"
"     ESLint is a popular static code analysis tool for JavaScript and
"     TypeScript that identifies and reports problems in your code. It's
"     designed to make code more consistent and avoid bugs. As of 2025, ESLint
"     is the most commonly used JavaScript and TypeScript linter.
"
"   prettier
"
"     Prettier is an opinionated code formatter that automatically formats
"     your code to ensure consistency across your entire codebase.  As of
"     2025, Prettier is by far the most popular code formatter for JavaScript,
"     TypeScript, and web development in general.
"
"     NOTE: Prettier uses a global .prettierrc located at
"     $XDG_CONFIG_HOME/prettier/.prettierrc.
"
" TypeScript:
"
"   tsc
"
"     tsc (TypeScript Compiler) is the official TypeScript compiler that
"     converts TypeScript code to JavaScript, but it also serves as a powerful
"     type checker. When used for linting/analysis, it focuses purely on
"     TypeScript's type system validation.
"
" Shell:
"
"   shfmt
"
"     shfmt is a shell script formatter that automatically formats shell
"     scripts (bash, POSIX sh, mksh) for consistency and readability. As of
"     2025, shfmt is the most popular tool for shell script formatting.
"
"   shellcheck
"
"     ShellCheck is a static analysis tool specifically designed for shell
"     scripts that identifies bugs, portability issues, and suspicious
"     constructs in bash, sh, and other shell scripts. It's considered
"     essential for shell script development. As of 2025, shellcheck is the
"     most popular tool for shell script linting.
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'go': ['goimports'],
\   'python': ['ruff', 'ruff_format'],
\   'javascript': ['eslint', 'prettier'],
\   'typescript': ['eslint', 'prettier'],
\   'sh': ['shfmt'],
\   'css': ['prettier'],
\   'scss': ['prettier'],
\   'html': ['prettier'],
\   'json': ['prettier'],
\   'yaml': ['prettier'],
\   'yml': ['prettier'],
\   'xml': ['xmllint'],
\   'dockerfile': ['hadolint'],
\}

let g:ale_linters = {
\   'go': ['golangci-lint'],
\   'python': ['ruff', 'mypy'],
\   'javascript': ['eslint'],
\   'typescript': ['eslint', 'tsc'],
\   'sh': ['shellcheck'],
\   'markdown': ['cspell', 'vale'],
\   'yaml': ['yamllint'],
\   'dockerfile': ['hadolint'],
\}

" Configure mypy.
"
" See: https://mypy.readthedocs.io/en/stable/running_mypy.html#following-imports
" let g:ale_python_mypy_options = '--follow-imports=silent'

" Configure shfmt (see shftm --help).
let g:ale_sh_shfmt_options = '-i 2 -ci'

" Configure message format.
let g:ale_echo_msg_info_str = 'I'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_error_str = 'E'
" let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'

" Set background color for ALE info signs.
highlight ALEInfoSign ctermfg=darkblue ctermbg=235

" Set background color for ALE warning signs.
highlight ALEWarningSign ctermfg=darkyellow ctermbg=235

" Set background color for ALE error signs.
highlight ALEErrorSign ctermfg=darkred ctermbg=235

" Do not open a window (location list) if there are no errors or warnings.
let g:ale_open_list = 1

" Do not show errors or warnings with virtual-text (i.e., inline text).
let g:ale_virtualtext_cursor = 'disabled'

" Navigate between errors.
nmap <silent> [e <Plug>(ale_previous_wrap)
nmap <silent> ]e <Plug>(ale_next_wrap)

" Only lint on enter and save.
"   - Do not lint on text change.
"   - Do not lint on insert leave.
" This configuration enables better performance and fewer distractions.
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0

" ALE commands.
nmap <silent> <Leader>af :ALEFix<CR>
nmap <silent> <Leader>ai :ALEInfo<CR>
nmap <silent> <Leader>ar :ALEReset<CR>
nmap <silent> <Leader>at :ALEToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-go Configuration
"
" vim-go is a popular Vim plugin that provides comprehensive Go development
" support within Vim. It's designed to make Vim feel like a full-featured IDE
" for Go programming.
"
" NOTE: After installation, run:
"
"   :GoInstallBinaries
"
" See: https://github.com/fatih/vim-go
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Disable automatic linting (use ALE instead).
let g:go_fmt_autosave = 0
let g:go_imports_autosave = 0
let g:go_metalinter_autosave = 0
let g:go_metalinter_autosave_enabled = []
let g:go_metalinter_enabled = []

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Tabular Configuration
"
" Tabular is a popular Vim plugin for text alignment and formatting. It's
" designed to help you align text in columns, making it easier to create
" well-formatted tables, code, and other structured text.
"
" See: https://github.com/godlygeek/tabular
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" In visual mode, the alignment would apply to the selected lines. In normal
" mode Tabular attempts to guess the range.
if exists(':Tabularize')
  " Manual alignment mappings for pipe characters (e.g., Markdown tables).
  nmap <Leader><Bar> :Tabularize /<Bar><CR>
  vmap <Leader><Bar> :Tabularize /<Bar><CR>
endif

" Auto-align on pipe insert (convenient for real-time table editing).
inoremap <silent> <Bar> <Bar><Esc>:call <SID>align()<CR>a

" Function: s:align()
" Automatically aligns table columns when inserting pipe characters.
"
" This function detects when a pipe character is inserted in a table-like
" context and automatically aligns the columns using Tabularize. It preserves
" the cursor position relative to the table structure after alignment.
"
" Courtesy of Tim Pope (https://gist.github.com/tpope/287147).
"
" Args: None
" Returns: None
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && \
    (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-markdown Configuration
"
" vim-markdown is a Vim plugin that enhances Markdown editing by adding
" features that are not available in Vim by default.
"
" See: https://github.com/preservim/vim-markdown
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable YAML front matter highlighting.
let g:vim_markdown_frontmatter = 1

" Enable TOML front matter.
let g:vim_markdown_toml_frontmatter = 1

" Enable JSON front matter.
let g:vim_markdown_json_frontmatter = 1

" Enable math syntax highlighting.
let g:vim_markdown_math = 1

" Show table of contents.
nmap <Leader>toc :Toc<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-polyglot Configuration
"
" vim-polyglot is a language pack plugin for Vim and Neovim that bundles
" syntax highlighting, indentation, and filetype detection for hundreds of
" programming and markup languages—all in one plugin.
"
" See: https://github.com/sheerun/vim-polyglot
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" No further configuration.
